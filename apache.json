{

  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",



  "Parameters" : {

    "KeyName": {

      "Description" : "new_key_sant_0819",

      "Type": "AWS::EC2::KeyPair::KeyName",

      "ConstraintDescription" : "new_key_sant_0819."

    },







    "InstanceType" : {

      "Description" : "WebServer EC2 instance type",

      "Type" : "String",

      "Default" : "t2.micro",

      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]

,

      "ConstraintDescription" : "must be a valid EC2 instance type."

    },


"Mappings" : {
  "AWSInstanceType2Arch" : {
    "t1.micro"    : { "Arch" : "64" },
    "t2.micro"    : { "Arch" : "64" },
    "m1.small"    : { "Arch" : "64" },
    "m1.medium"   : { "Arch" : "64" },
    "m1.large"    : { "Arch" : "64" },
    "m1.xlarge"   : { "Arch" : "64" },
    "m2.xlarge"   : { "Arch" : "64" },
    "m2.2xlarge"  : { "Arch" : "64" },
    "m2.4xlarge"  : { "Arch" : "64" },
    "c1.medium"   : { "Arch" : "64" },
    "c1.xlarge"   : { "Arch" : "64" },
    "cc1.4xlarge" : { "Arch" : "64" }
  },
  "AWSRegionArch2AMI" : {
    "us-east-1"      : { "32" : "ami-1a249873", "64" : "ami-1624987f" },
    "eu-west-1"      : { "32" : "ami-047bb4163c506cd98", "64" : "ami-047bb4163c506cd98" },
    "us-west-1"      : { "32" : "ami-2231bf12", "64" : "ami-2a31bf1a" },
    "us-west-2"      : { "32" : "ami-19f9de5c", "64" : "ami-1bf9de5e" },
    "eu-west-1"      : { "32" : "ami-937474e7", "64" : "ami-c37474b7" },
    "ap-southeast-1" : { "32" : "ami-a2a7e7f0", "64" : "ami-a6a7e7f4" },
    "ap-northeast-1" : { "32" : "ami-486cd349", "64" : "ami-4e6cd34f" },
    "ap-southeast-2" : { "32" : "ami-b3990e89", "64" : "ami-bd990e87" },
    "sa-east-1"      : { "32" : "ami-e209d0ff", "64" : "ami-1e08d103" }
  }
}

"WebServerSecurityGroup" : {

  "Type" : "AWS::EC2::SecurityGroup",

  "Properties" : {

    "GroupDescription" : "Enable SSH and HTTP access",

    "SecurityGroupIngress" : [

      { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },

      { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" }

      { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "66666", "CidrIp" : "86.129.66.178/32" }

    ]

  }

}

Specify an admin user with full administrator rights

"CfnUser" : {
  "Type" : "AWS::IAM::User",
  "Properties" : {
    "Path" : "/",
    "Policies" : [{
      "PolicyName" : "Admin",
      "PolicyDocument" : {
        "Statement" : [{
          "Effect" : "Allow",
          "Action" : "*",
          "Resource" : "*"
     }]
      }
    }]
  }
}

Create the web service instance and specify the packages to install. In our case the Java JDK, Apache Tomcat and Apache HTTP server.

"WebServer": {
  "Type": "AWS::EC2::Instance",
  "Metadata" : {
    "AWS::CloudFormation::Init" : {
      "config" : {
        "packages" : {
          "yum" : {
            "java-1.8.0-openjdk" : [],
            "tomcat8" : [],
            "httpd" : []
          }
        },
Download the web applications to deploy. Artifacts found in a S3 bucket in this case.

"files" : {
  "/usr/share/tomcat8/webapps/sample.war" : {
    "source" : "s3://santhoshdemos3/sample.war",
    "mode"   : "000500",
    "owner"  : "tomcat",
    "group"  : "tomcat"
  }
}

Set AMI specified in AWSRegionArch2AMI by region. KeyName and InstanceType is set by the user when the stack is created (see Parameters). Set name of the instance to WebServ

"Properties": {
  "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
             { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] }] },
  "InstanceType"   : { "Ref" : "InstanceType" },
  "SecurityGroups" : [ {"Ref" : "WebServerGroupGroup"} ],
  "KeyName"        : { "Ref" : "KeyName" },
  "Tags"           : [{ "Key" : "Name", "Value" : "WebServer" }],

Define scripts to run on the server on first startup:

"UserData" : {
  "Fn::Base64" : {
    "Fn::Join" : ["", [
      "#!/bin/bash -v\n",
      "date > /home/ec2-user/starttime\n",
      "yum update -y aws-cfn-bootstrap\n",

      "## Error reporting helper function\n",
      "function error_exit\n",
      "{\n",
      "   /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
      "   exit 1\n",
      "}\n",

      "## Initialize CloudFormation bits\n",
      "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r FormEngine",
      "   --access-key ",  { "Ref" : "HostKeys" },
      "   --secret-key ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
      "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

      "# Add Tomcat user to sudoers and disable tty\n",
      "echo \"tomcat ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n",
      "echo \"Defaults:%tomcat !requiretty\" >> /etc/sudoers\n",
      "echo \"Defaults:tomcat !requiretty\" >> /etc/sudoers\n",

      "# Set JVM settings\n",
      "echo \"JAVA_OPTS='${JAVA_OPTS} -Xms512m -Xmx512m -XX:PermSize=256m -XX:MaxPermSize=512m'\" >> /etc/tomcat8/tomcat8.conf\n",

      "# Tomcat Setup\n",
      "chown -R tomcat:tomcat /usr/share/tomcat8/\n",
      "chkconfig tomcat8 on\n",
      "chkconfig --level 345 tomcat8 on\n",

      "# Configure Apache HTTPD\n",
      "chkconfig httpd on\n",
      "chkconfig --level 345 httpd on\n",

      "# Proxy all requests to Tomcat\n",
      "echo \"ProxyPass  / ajp://localhost:8009/\" >> /etc/httpd/conf/httpd.conf\n",

      "# Start servers\n",
      "service tomcat8 start\n",
      "/etc/init.d/httpd start\n",

      "# Send signal to WaitHandle that the setup is completed\n"
      "/opt/aws/bin/cfn-signal", " -e 0", " '", { "Ref" : "WaitHandle" }, "'","\n",

      "date > /home/ec2-user/stoptime"
    ]]}}
  }
},

Wait for the scripts defined in the WebServer configuration to complete before completing the stack creation.

"WaitHandle" : {
  "Type" : "AWS::CloudFormation::WaitConditionHandle"
},

"WaitCondition" : {
  "Type" : "AWS::CloudFormation::WaitCondition",
  "DependsOn" : "WebServer",
  "Properties" : {
    "Handle" : { "Ref" : "WaitHandle" },
    "Timeout" : "1200"
  }
}
